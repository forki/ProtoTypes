namespace ProtoTypes.Generation

open Microsoft.FSharp.Quotations

open ProtoTypes.Core
open ProviderImplementation.ProvidedTypes

open Froto.Parser.Model
open Froto.Core
open Froto.Core.Encoding

/// Contains methods to serialize supported data types to binary format.
/// So far, this module is a simple wrapper around Froto.Core.Encoding.Serializer.dehydrateXXX family of inlined functions.
/// Such wrapper is needed, because apprently erased type provides don't support direct calls of inlined functions.
module Serialization = 
        
    let serialize (prop: ProtoPropertyInfo) buffer this =
        let value = Expr.PropertyGet(this, prop.ProvidedProperty)

        let position = prop.ProtoField.Position
        
        // writer is an expression that represents a function 'T -> unit for any primitive or enum field of type 'T
        // For messages, writer will have type Message -> unit. It's caused by the fact that it's not possible to pass
        // any generic arguments including option<'T> and 'T -> unit to other functions if 'T is generated by a type provider.
        let writer =
            match prop.TypeKind with
                | Primitive -> 
                    match prop.UnderlyingType with
                    | t when t = typeof<int> -> <@@ Codec.writeInt32 position %%buffer@@>
                    | t when t = typeof<string> -> <@@ Codec.writeString position %%buffer @@>
                    | t when t = typeof<float> -> <@@ Codec.writeDouble position %%buffer @@>
                    | t when t = typeof<bool> -> <@@ Codec.writeBool position %%buffer @@>
                    | x -> notsupportedf "Primitive type '%s' is not supported" x.Name
                | Class -> <@@ Codec.writeEmbedded position %%buffer @@>
                | Enum -> <@@ Codec.writeInt32 position %%buffer @@>
                
        let write f value = 
            f
            |> Expr.getMethodDef
            |> Expr.makeGenericMethod [prop.UnderlyingType]
            |> Expr.callStatic [writer; value]

        try
            match prop.ProtoField.Rule with
            | Required -> Expr.Application(writer, value)
            | Optional ->
                match prop.TypeKind with
                | Class -> write <@@ Codec.writeOptionalEmbedded x x @@> <| Expr.Coerce(value, typeof<obj>)
                | _ -> write <@@ Codec.writeOptional x x @@> value
            | Repeated ->
                match prop.TypeKind with
                | Class -> write <@@ Codec.writeRepeatedEmbedded x x @@> <| Expr.Coerce(value, typeof<obj>)
                | _ -> write <@@ Codec.writeRepeated x x @@> value
        with
        | ex -> 
            printfn "Failed for property %s: %O. Error: %O" prop.ProvidedProperty.Name value.Type ex
            reraise()
